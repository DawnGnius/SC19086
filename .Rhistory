library(StatComp19086)
setwd("~/Code/R/StatComp-R")
devtools::build_vignettes()
devtools::build_vignettes()
devtools::load_all(".")
library(StatComp19086)
library(StatComp19086)
devtools::load_all(".")
library(StatComp19086)
library(StatComp19086)
library(devtools)
devtools::build_vignettes()
library(StatComp19086)
library(StatComp19086)
usethis::use_vignette("my-vignette")
devtools::build()
library(StatComp19086)
install.packages("snowfall")
install.packages(c("bootstrap", "corrplot"))
devtools::build()
devtools::build()
install.packages("DAAG")
install.packages("Ball")
devtools::build()
usethis::use_vignette("Homework")
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
devtools::load_all(".")
check()
devtools::check()
devtools::check()
devtools::load_all(".")
library(StatComp19086)
remove.packages("StatComp19086", lib="~/R/win-library/3.6")
library(StatComp19086)
sigma <- 2
x0 <- 25
N <- 2000
res <- rw_Metropolis(sigma, x0, N)
sigma <- 2
x0 <- 25
N <- 2000
res <- rw_Metropolis(sigma, x0, N)
library(StatComp19086)
devtools::document()
devtools::document()
remove.packages("StatComp19086", lib="~/R/win-library/3.6")
devtools::load_all(".")
library(StatComp19086)
remove.packages("StatComp19086", lib="~/R/win-library/3.6")
devtools::install_github("DawnGnius/StatComp19086", build_vignettes=TRUE)
library(devtools)
sigma <- 2
x0 <- 25
N <- 2000
res <- rw_Metropolis(sigma, x0, N)
remove.packages("StatComp19086", lib="~/R/win-library/3.6")
devtools::document()
devtools::load_all(".")
library(StatComp19086)
sigma <- 2
x0 <- 25
N <- 2000
res <- rw_Metropolis(sigma, x0, N)
devtools::document()
devtools::document()
devtools::load_all(".")
devtools::document()
devtools::load_all()
devtools::check()
devtools::document()
Rcpp::compileAttributes()
remove.packages("StatComp19086", lib="~/R/win-library/3.6")
devtools::load_all()
devtools::check()
devtools::document()
devtools::load_all()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(StatComp19086)
sigma <- 2
x0 <- 25
N <- 2000
res <- rw_Metropolis(sigma, x0, N)
library(StatComp19086)
sigma <- 2
x0 <- 25
N <- 2000
res <- rw_Metropolis(sigma, x0, N)
Rcpp.package.skeleton()
Rcpp::Rcpp.package.skeleton()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
install.packages("L1pack")
devtools::document()
devtools::document()
devtools::load_all(".")
library(StatComp19086)
fdp(0.01)
n <- 100; rho <- 0.5; sig <- 2; p.nonzero <- 10; beta.nonzero <- 1
fdp(0.01)
beta <- c(rep(beta.nonzero, p.nonzero), rep(0, p-p.nonzero))
Sigma <- matrix(rep(rho, p*p), p, p); diag(Sigma) <- rep(1, p)
dat <- MASS::mvrnorm(n, rep(0,p), Sigma)
Sigma.eigen <- eigen(Sigma)
mu <- unlist(base::lapply(X=1:p, FUN=function(ii)
sqrt(n)*beta[ii]*sqrt(var(dat[, ii]))/sig))
p = 100
beta <- c(rep(beta.nonzero, p.nonzero), rep(0, p-p.nonzero))
Sigma <- matrix(rep(rho, p*p), p, p); diag(Sigma) <- rep(1, p)
dat <- MASS::mvrnorm(n, rep(0,p), Sigma)
Sigma.eigen <- eigen(Sigma)
mu <- unlist(base::lapply(X=1:p, FUN=function(ii)
sqrt(n)*beta[ii]*sqrt(var(dat[, ii]))/sig))
fdp(0.01)
my.fun(p=100, t=0.01)
devtools::load_all(".")
library(StatComp19086)
my.fun(p=100, t=0.01)
library(StatComp19086)
my.fun(p=100, t=0.01)
my.fun(p=100, t=0.01)
n <- 100; rho <- 0.5; sig <- 2; p.nonzero <- 10; beta.nonzero <- 1
my.fun(p=100, t=0.01)
remove.packages("StatComp19086", lib="~/R/win-library/3.6")
devtools::load_all(".")
devtools::document()
devtools::document()
install.packages("plot3D")
devtools::document()
library(StatComp19086)
set.seed(111)
n <- 200
Num.Cmp <- 8
pro <- rep(1/8, Num.Cmp)
multi <- sample(1:Num.Cmp, n, replace = T, prob=pro)
mu <- 3 * ((2/3)^(1:Num.Cmp) - 1)
sigma <- (2/3)^(1:Num.Cmp)
x <- NULL
for (ii in 1:Num.Cmp) {
com_txt <- paste("com", ii, " <- rnorm(length(which(multi==", ii, ")), mean=", mu[ii], ", sd=", sigma[ii], ")",sep="")
eval(parse(text=com_txt))
com_txt <- paste("x <- c(x, com", ii, ")", sep="")
eval(parse(text=com_txt))
}
# true density function, y is h, and z is v.
y <- seq(-3, 1, 0.01)
z <- rep(0, length(y))
for (ii in 1:Num.Cmp) {
z <- z + pro[ii] * dnorm(y, mean=mu[ii], sd=sigma[ii])
}
t <- seq(-3, 1, 0.05)
h <- unlist(base::lapply(X=t, FUN=rodeo.local.bw1, x=x))
plot(t, h, "l", main="Bandwidth of Rodeo", xlab="x", ylab="h")
devtools::document()
devtools::load_all(".")
devtools::load_all(".")
devtools::document()
library(SC19086)
devtools::document()
remove.packages("SC19086", lib="~/R/win-library/3.6")
remove.packages("StatComp19086", lib="~/R/win-library/3.6")
library(SC19086)
remove.packages("SC19086", lib="~/R/win-library/3.6")
library(SC19086)
remove.packages("SC19086", lib="~/R/win-library/3.6")
devtools::document()
devtools::load_all(".")
library(SC19086)
devtools::load_all(".")
library(SC19086)
remove.packages("SC19086", lib="~/R/win-library/3.6")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
getLoadedDLLs()
devtools::load_all(".")
library(SC19086)
set.seed(12345)
n <- 100; rho <- 0.5; sig <- 2; p.nonzero <- 10; beta.nonzero <- 1; p <- 100
beta <- c(rep(beta.nonzero, p.nonzero), rep(0, p-p.nonzero))
Sigma <- matrix(rep(rho, p*p), p, p); diag(Sigma) <- rep(1, p)
dat <- MASS::mvrnorm(n, rep(0,p), Sigma)
Sigma.eigen <- eigen(Sigma)
mu <- unlist(base::lapply(X=1:p, FUN=function(ii) sqrt(n)*beta[ii]*sqrt(var(dat[, ii]))/sig))
fdp(0.01)
set.seed(12345)
n <- 100; rho <- 0.5; sig <- 2; p.nonzero <- 10; beta.nonzero <- 1; p <- 100
beta <- c(rep(beta.nonzero, p.nonzero), rep(0, p-p.nonzero))
Sigma <- matrix(rep(rho, p*p), p, p); diag(Sigma) <- rep(1, p)
dat <- MASS::mvrnorm(n, rep(0,p), Sigma)
Sigma.eigen <- eigen(Sigma)
mu <- unlist(base::lapply(X=1:p, FUN=function(ii) sqrt(n)*beta[ii]*sqrt(var(dat[, ii]))/sig))
my.fdp(0.01)
my.plot(p=100, t=0.01)
library(SC19086)
my.plot(p=100, t=0.01)
library(SC19086)
my.plot(p=100, t=0.01)
rodeo.local.bw1(xx, x, h.init = 1.3/log(log(n)), beta = 0.9, cn = log(n)/n)
rodeo.local.bw1(xx, x, h.init = 1.3/log(log(n)), beta = 0.9, cn = log(n)/n)
sigma <- 2
x0 <- 25
N <- 2000
res <- rw_Metropolis(sigma, x0, N)
remove.packages("SC19086", lib="~/R/win-library/3.6")
devtools::load_all(".")
library(SC19086)
devtools::document()
devtools::document()
library(SC19086)
library(SC19086)
set.seed(12345)
n <- 100; rho <- 0.5; sig <- 2; p.nonzero <- 10; beta.nonzero <- 1; p <- 100
beta <- c(rep(beta.nonzero, p.nonzero), rep(0, p-p.nonzero))
Sigma <- matrix(rep(rho, p*p), p, p); diag(Sigma) <- rep(1, p)
dat <- MASS::mvrnorm(n, rep(0,p), Sigma)
Sigma.eigen <- eigen(Sigma)
mu <- unlist(base::lapply(X=1:p, FUN=function(ii) sqrt(n)*beta[ii]*sqrt(var(dat[, ii]))/sig))
my.fdp(0.01)
n <- 100; rho <- 0.5; sig <- 2; p.nonzero <- 10; beta.nonzero <- 1
my.plot(p=100, t=0.01)
set.seed(111)
n <- 200
Num.Cmp <- 8
pro <- rep(1/8, Num.Cmp)
multi <- sample(1:Num.Cmp, n, replace = T, prob=pro)
mu <- 3 * ((2/3)^(1:Num.Cmp) - 1)
sigma <- (2/3)^(1:Num.Cmp)
x <- NULL
for (ii in 1:Num.Cmp) {
com_txt <- paste("com", ii, " <- rnorm(length(which(multi==", ii, ")), mean=", mu[ii], ", sd=", sigma[ii], ")",sep="")
eval(parse(text=com_txt))
com_txt <- paste("x <- c(x, com", ii, ")", sep="")
eval(parse(text=com_txt))
}
# true density function, y is h, and z is v.
y <- seq(-3, 1, 0.01)
z <- rep(0, length(y))
for (ii in 1:Num.Cmp) {
z <- z + pro[ii] * dnorm(y, mean=mu[ii], sd=sigma[ii])
}
t <- seq(-3, 1, 0.05)
h <- unlist(base::lapply(X=t, FUN=rodeo.local.bw1, x=x))
plot(t, h, "l", main="Bandwidth of Rodeo", xlab="x", ylab="h")
remove.packages("SC19086", lib="~/R/win-library/3.6")
devtools::document()
devtools::document()
library(SC19086)
set.seed(111)
n <- 200
Num.Cmp <- 8
pro <- rep(1/8, Num.Cmp)
multi <- sample(1:Num.Cmp, n, replace = T, prob=pro)
mu <- 3 * ((2/3)^(1:Num.Cmp) - 1)
sigma <- (2/3)^(1:Num.Cmp)
x <- NULL
for (ii in 1:Num.Cmp) {
com_txt <- paste("com", ii, " <- rnorm(length(which(multi==", ii, ")), mean=", mu[ii], ", sd=", sigma[ii], ")",sep="")
eval(parse(text=com_txt))
com_txt <- paste("x <- c(x, com", ii, ")", sep="")
eval(parse(text=com_txt))
}
# true density function, y is h, and z is v.
y <- seq(-3, 1, 0.01)
z <- rep(0, length(y))
for (ii in 1:Num.Cmp) {
z <- z + pro[ii] * dnorm(y, mean=mu[ii], sd=sigma[ii])
}
t <- seq(-3, 1, 0.05)
h <- unlist(base::lapply(X=t, FUN=rodeo.local.bw1, x=x))
t <- seq(-3, 1, 0.05)
h <- unlist(base::lapply(X=t, FUN=rodeo.local.bw1, x=x))
fit.rodeo <- rodeo.local1(t=t, x=x)
plot(t, fit.rodeo, "l", lty=2, ylim=c(0,2.5), xlim=c(-3, 1), main="Rodeo", xlab="x", ylab="Density")
lines(y, z, lty=1, lwd=2)
legend("topright", legend=c("True Density", "Rodeo"), col=1, lty=c(1, 2), lwd=c(2, 1))
